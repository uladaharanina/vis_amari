---
import fs from 'node:fs/promises';

const folderPath = `./public/preview`;

// Read the directory and filter out only image files
const files = await fs.readdir(folderPath);
const images = files.filter(file =>
  /\.(jpg|jpeg|png|gif|webp)$/i.test(file) // Ensure only image files are included
);

---

<div id="carouselTargetList">
  <ul id="carousel">
    {
      images.map((img, index) => {
        return (
          <li class="list_holder">
              <img src={`/preview/${img}`} alt={img} class={img.class} loading="eager"/>
          </li>
        );
      })
    }
  </ul>
  
</div>

  <style>
      /**DESKTOP */
      @media screen and (min-width:1400px) {
        #carousel {
        display: flex;
        overflow-x: hidden;
        gap: 20px;
        width:95%;
        margin: auto;
        margin-top: 19em;
        padding: 20px 0;
      }

      .list_holder {
          list-style-type: none;
      }

      .list_holder img {
        max-width:450px;
        height: 460px;
        object-fit: cover;
      }
      }

            /**LAPTOP */
      @media screen and (min-width:800px) and (max-width:1399px) {
        #carousel {
        display: flex;
        overflow-x: hidden;
        gap: 20px;
        width:95%;
        margin: auto;
        margin-top: 10em;
        padding: 20px 0;
      }

      .list_holder {
          list-style-type: none;
      }

      .list_holder img {
        width: 250px;
        height: 360px;
        object-fit: cover;
      }
      }


 /**TABLET */
 @media screen and (min-width:401px) and (max-width:799px){

      #carouselTargetList::-webkit-scrollbar{
        display: none;
      }
      
      
      #carousel{
        display: flex;
        overflow-x: hidden;
        gap: 20px;
        width:95%;
        margin: auto;
        margin-top: 2em;
        padding: 20px 0;
      }

    .list_holder{
      list-style-type: none;
      padding: 0;
    }

      .list_holder img {
        width: 200px;
        object-fit: cover; /* Ensure the images fit the container without stretching */
        margin: 0 5px;
      }
    }

 /**MOBILE */
 @media screen and (max-width:400px) {
  #carouselTargetList {
      width: 100%;
      overflow: hidden;
      }

      #carouselTargetList::-webkit-scrollbar{
        display: none;
      }
      
      #carousel{
        display: flex; /* Display images horizontally */
        transition: all 1s ease-in-out; /* Smooth transition for sliding */
        overflow: visible;
        padding: 0;
        width: max-content; /* Make the carousel container width as large as the content inside */
      }

    .list_holder{
      list-style-type: none;
      padding: 0;
    }

      .list_holder img {
        width: 100vw; /* Each image takes up full width of the viewport */
        object-fit: cover; /* Ensure the images fit the container without stretching */
        margin: 0 5px;
      }
    }

  </style>

<script>
window.addEventListener('load', () => {
  const carouselWrapper = document.querySelector('#carouselTargetList');
  const carousel = document.querySelector('#carousel');

  const images = carouselWrapper.querySelectorAll('img');
  const itemWidth = images[0].offsetWidth;
  let scrollPosition = 0;
  let delay = 1500;  // Delay between scrolls in milliseconds (3 seconds)
  let isReachedTheEnd = false;

  // Function to move the carousel smoothly
  function moveCarousel() {

    console.log(scrollPosition)
    // Move right until we reach the end of the carousel
    if (scrollPosition < carousel.scrollWidth && !isReachedTheEnd) {
      scrollPosition += itemWidth + 10;

    }

    // If we reach the end, reset to the start
    if (scrollPosition >= carousel.scrollWidth - itemWidth|| isReachedTheEnd) {
      isReachedTheEnd = true;
      scrollPosition -= itemWidth + 10;

      if(scrollPosition < 300){
        isReachedTheEnd = false;

      }
    }

    // Apply the smooth scrolling effect by using transform
    carousel.style.transition = 'transform 1.2s ease-in-out';  // Smooth transition
    carousel.style.transform = `translateX(-${scrollPosition}px)`;  // Move carousel

    // Continue moving the carousel
    setTimeout(moveCarousel, delay);
  }

  // Function for desktop carousel (smooth scroll and reset on reach end)
  function moveCarouselDesktop() {
    setInterval(() => {
      // Check if we have reached the end of the carousel
      if (scrollPosition >= carousel.scrollWidth - carousel.clientWidth || isReachedTheEnd) {
        isReachedTheEnd = true;
        scrollPosition -= itemWidth;
        if (scrollPosition < 200) {
          scrollPosition = 0;
          isReachedTheEnd = false;
        }
      } else {
        // Scroll to the right
        scrollPosition += itemWidth;
      }

      // Apply smooth scroll behavior
      carousel.scrollTo({
        left: scrollPosition,
        behavior: 'smooth',
      });
    }, delay);
  }

  // Mobile behavior (small screens)
  if (screen.width < 401) {
    setTimeout(moveCarousel, 2500);  // Start the mobile carousel with a delay
    console.log("Test");
  }
  // Desktop behavior (large screens)
  else {
    moveCarouselDesktop();  // Start the desktop carousel immediately
  }
});

</script>
  